<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Responsive Sidebar Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            display: flex;
            font-family: Arial, sans-serif;
        }
        .sidebar {
            width: 250px;
            background-color: #fff;
            padding: 20px;
            border-right: 1px solid #ddd;
            height: 100vh;
            position: fixed;
            left: 0;
            top: 0;
            overflow-y: auto;
            transition: transform 0.3s ease;
        }
        .sidebar a {
            display: block;
            text-decoration: none;
            color: #333;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 10px;
            transition: background 0.3s;
        }
        .sidebar a:hover {
            background-color: #6366f1;
            color: #fff;
        }
        .content {
            margin-left: 250px;
            padding: 20px;
            flex: 1;
        }
        .menu-toggle {
            display: none;
            position: absolute;
            top: 10px;
            left: 10px;
            background-color: #6366f1;
            color: white;
            border: none;
            padding: 10px;
            cursor: pointer;
            border-radius: 5px;
        }
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
            }
            .sidebar.active {
                transform: translateX(0);
            }
            .menu-toggle {
                display: block;
            }
            .content {
                margin-left: 0;
            }
        }
    </style>
</head>
<body>
    <button class="menu-toggle" onclick="toggleMenu()">â˜°</button>
    <div class="sidebar" id="sidebar">
        <a href="#">Dashboard</a>
        <a href="#">Tickets</a>
        <a href="#">Agents</a>
        <a href="#">Customers</a>
        <a href="#">Products</a>
        <a href="#">Orders</a>
        <a href="#">Analytics</a>
        <a href="#">Settings</a>
    </div>
    <div class="content">
        <h1>Welcome to the Dashboard</h1>
        <p>Add your content here.</p>
    </div>
    <script>
        function toggleMenu() {
            document.getElementById("sidebar").classList.toggle("active");
        }
    </script>
</body>
</html>








































import React, { useState } from "react";
import "../Css/UserProfile.css";

const UserProfile = () => {
  const [activeTab, setActiveTab] = useState("general");

  return (
    <div className="user-profile">
      <div className="sidebar">
        <button onClick={() => setActiveTab("general")} className={activeTab === "general" ? "active" : ""}>General</button>
        <button onClick={() => setActiveTab("tasks")} className={activeTab === "tasks" ? "active" : ""}>Tasks</button>
        <button onClick={() => setActiveTab("sub")} className={activeTab === "sub" ? "active" : ""}>Subscription</button>
        <button onClick={() => setActiveTab("settings")} className={activeTab === "settings" ? "active" : ""}>Settings</button>
      </div>

      <div className="content">
        {activeTab === "general" && (
          <div className="tab-content">
            <h2>User Details</h2>
            <p>Name: John Doe</p>
            <p>Email: johndoe@example.com</p>
            <p>Phone: +1234567890</p>
          </div>
        )}

        {activeTab === "tasks" && (
          <div className="tab-content">
            <h2>Tasks</h2>
            <ul>
              <li>Task 1 - Completed</li>
              <li>Task 2 - In Progress</li>
              <li>Task 3 - Pending</li>
            </ul>
          </div>
        )}

        {activeTab === "sub" && (
          <div className="tab-content">
            <h2>Subscription</h2>
            <div className="subscription-card">Basic Plan - $10/month</div>
            <div className="subscription-card">Pro Plan - $20/month</div>
            <div className="subscription-card">Enterprise Plan - $50/month</div>
          </div>
        )}

        {activeTab === "settings" && (
          <div className="tab-content">
            <h2>Settings</h2>
            <p>Change Password</p>
            <p>Manage Notifications</p>
            <p>Privacy Settings</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default UserProfile;






/* UserProfile.css */
.user-profile {
  display: flex;
  height: 100vh;
}

.sidebar {
  width: 250px;
  background-color: #2c3e50;
  padding: 20px;
  display: flex;
  flex-direction: column;
}

.sidebar button {
  background: none;
  border: none;
  color: white;
  padding: 15px;
  text-align: left;
  font-size: 16px;
  cursor: pointer;
  transition: background 0.3s;
}

.sidebar button.active,
.sidebar button:hover {
  background-color: #34495e;
}

.content {
  flex: 1;
  padding: 20px;
  background-color: #ecf0f1;
}

.tab-content {
  background: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.subscription-card {
  padding: 15px;
  margin: 10px 0;
  border-radius: 5px;
  background-color: #3498db;
  color: white;
  text-align: center;
  font-size: 16px;
}


























































import React, { useState, useEffect } from "react";
import { Form, Button, Nav, ProgressBar, Modal } from "react-bootstrap";
import axios from "axios";
import "../Css/UserProfile.css"; // Link the CSS file
import { useAuth } from "./Auth"; // Assuming this is your auth context
import userImage from "../assets/images/book_logo.png";
import UserLogo from "../assets/images/profileimg-membership.png";
 

const UserProfile = () => {
  const { userData, setUserData } = useAuth(); // Fetch userData from Auth context
  const [teamData, setTeamData] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [referralCount, setReferralCount] = useState(0);
  const [taskCount, setTaskCount] = useState(""); // Task count
  const [isEditing, setIsEditing] = useState(false);
  const [editableDetails, setEditableDetails] = useState(userData || {});
  const [error, setError] = useState("");
  const [activeTab, setActiveTab] = useState("about"); // State for active tab
  const [showModal, setShowModal] = useState(false);
  const [profileImage, setProfileImage] = useState(userData?.profileImage || UserLogo);

  // Update editableDetails when userData changes
  useEffect(() => {
    setEditableDetails(userData || {});
  }, [userData]);

  // Fetch team data based on user ID
  const fetchTeamData = async () => {
    setIsLoading(true);
    try {
      const response = await axios.get(
        `https://signpostphonebook.in/try_totalcount.php?id=${userData?.id}`
      );
      if (response.data?.total_count) {
        setTeamData([{ total_count: response.data.total_count }]);
        setTaskCount(response.data.total_count || 0); // Set task count from the API response
      } else {
        setTeamData([]);
      }
    } catch (error) {
      console.error("Error fetching team data:", error);
      setTeamData([]);
    } finally {
      setIsLoading(false);
    }
  };

 // Fetch referral count based on user mobile number
 const fetchReferralCount = async () => {
  try {
    if (!userData?.mobileno) {
      setError("Mobile number is required for fetching referral count.");
      return;
    }

    const response = await fetch(
      `https://signpostphonebook.in/try_referrals_count.php?mobile=${encodeURIComponent(userData.mobileno)}`
    );

    if (!response.ok) {
      throw new Error("Failed to fetch referral count.");
    }

    const data = await response.text(); // Fetch response as text

    const match = data.match(/Total Referred: (\d+)/); // Extract number from response

    if (match) {
      setReferralCount(parseInt(match[1], 10)); // Set extracted referral count
    } else {
      setError("No referral data found.");
    }
  } catch (error) {
    setError(error.message || "Failed to fetch referral count.");
  }
};


  useEffect(() => {
    if (userData) {
      fetchTeamData();
      fetchReferralCount();
    }
  }, [userData]);

 // Handle edit toggle
 const toggleEdit = () => {
  setIsEditing(!isEditing);
};

const handleChange = (e) => {
  const { name, value } = e.target;
  setEditableDetails((prev) => ({ ...prev, [name]: value }));
};

// Save profile changes

const handleSave = async () => {
  try {
    if (!editableDetails.id) {
      setError("User ID is missing. Cannot update profile.");
      return;
    }

    const { ...payload } = editableDetails;
    payload.id = userData.id;

    console.log("Payload being sent to server:", payload);

    const response = await axios.post(
      "https://signpostphonebook.in/try_update_profile_for_new_database.php",
      payload
    );

    if (response.data.success) {
      if (setUserData) {
        setUserData((prevData) => ({
          ...prevData,
          ...payload, // Include updated details
        }));
      } else {
        console.error("setUserData is not a function");
      }
      setIsEditing(false);  // Switch to non-editable view
      setError("");  // Clear any errors
      console.log("Profile updated successfully:", response.data.message);
    } else {
      console.error("Failed to update profile:", response.data.message);
      setError(response.data.message || "Failed to save changes.");
    }
  } catch (error) {
    console.error("Error updating profile:", error);
    setError("Something went wrong. Please try again later.");
  }
};




const handleTabChange = (selectedTab) => {
  setActiveTab(selectedTab); // Update active tab
};

 // Handle image upload
 const handleImageChange = async (event) => {
  const file = event.target.files[0];
  if (!file) return;

  const formData = new FormData();
  formData.append("profileImage", file);
  formData.append("id", userData?.id);

  try {
    const response = await axios.post("https://signpostphonebook.in/upload_profile.php", formData, {
      headers: { "Content-Type": "multipart/form-data" },
    });

    if (response.data.success) {
      setProfileImage(response.data.imageUrl);
      setUserData({ ...userData, profileImage: response.data.imageUrl });
    } else {
      console.error("Image upload failed", response.data.message);
    }
  } catch (error) {
    console.error("Error uploading image", error);
  }
};

 
  
  
  
 
  return (
    <div className="user-profile">
      <div
        className="profile-head"
         
      >
        <div className="profile-header">
          <div className="profile-picture">
            <label htmlFor="profile-upload" className="profile-circle">
              <img src={UserLogo} alt="Profile" className="profile-img" />
              <i className="fas fa-camera overlay-icon"></i>
            </label>
            <input type="file" id="profile-upload" accept="image/*" style={{ display: "none" }} onChange={handleImageChange} />
          </div>
          <div className="profile-info" style={{ marginTop: "5vh" }}>
            <h3>{userData?.businessname || userData.person || "Business Name Not Available"}</h3>
            <p>{userData?.product || "Product Info Not Available"}</p>
            <p>{userData?.joiningDate || "Joining Date Not Available"}</p>
          </div>
          <div className="profile-actions">
            <Button className="share-btn">
              <i className="fas fa-share"></i> Share
            </Button>
            <Button className="ref-btn" onClick={() => setShowModal(true)}>
              <i className="fas fa-users"></i> My Ref
            </Button>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="tabs-wrapper">
          <Nav
            variant="pills"
            activeKey={activeTab}
            onSelect={(selectedTab) => handleTabChange(selectedTab)}
            className="profile-tabs"
          >
            <Nav.Item>
              <Nav.Link eventKey="about">About</Nav.Link>
            </Nav.Item>
            <Nav.Item>
              <Nav.Link eventKey="tasks">Tasks</Nav.Link>
            </Nav.Item>
            <Nav.Item>
              <Nav.Link eventKey="sub">Sub</Nav.Link>
            </Nav.Item>
            <Nav.Item>
              <Nav.Link eventKey="membership">Membership Card</Nav.Link>
            </Nav.Item>
          </Nav>
        </div>
      </div>
      

      {/* Tab Content */}
      <div className="tab-content">
        {/* About Tab */}
        {activeTab === "about" && (
          <div className="about-tab" style={{ padding: "10px" }}>
            <h4>About Me</h4>
            <div className="about-container">
              {isEditing ? (
                <div className="about-edit-form">
                   
                  <Form.Group>
                    <Form.Label>Prefix</Form.Label>
                    <Form.Control
                      type="text"
                      name="prefix"
                      value={editableDetails.prefix || ""}
                      onChange={handleChange}
                    />
                  </Form.Group>
                  <Form.Group>
                    <Form.Label>Name</Form.Label>
                    <Form.Control
                      type="text"
                      name="name"
                      value={editableDetails.businessname || ""}
                      onChange={handleChange}
                    />
                  </Form.Group>
                   
                  <Form.Group>
                    <Form.Label>Product</Form.Label>
                    <Form.Control
                      type="text"
                      name="product"
                      value={editableDetails.product || ""}
                      onChange={handleChange}
                    />
                  </Form.Group>
                  <Form.Group>
                    <Form.Label>Address</Form.Label>
                    <Form.Control
                      type="text"
                      name="doorno"
                      value={editableDetails.product || ""}
                      onChange={handleChange}
                    />
                  </Form.Group>
                  <Form.Group>
                    <Form.Label>city</Form.Label>
                    <Form.Control
                      type="text"
                      name="city"
                      value={editableDetails.city || ""}
                      onChange={handleChange}
                    />
                  </Form.Group>
                  <Form.Group>
                    <Form.Label>pincode</Form.Label>
                    <Form.Control
                      type="number"
                      name="pincode"
                      value={editableDetails.pincode || ""}
                      onChange={handleChange}
                    />
                  </Form.Group>
                  <Form.Group>
                    <Form.Label>email</Form.Label>
                    <Form.Control
                      type="text"
                      name="email"
                      value={editableDetails.email || ""}
                      onChange={handleChange}
                    />
                  </Form.Group>
                  <Form.Group>
                    <Form.Label>Mobile no</Form.Label>
                    <Form.Control
                      type="Number"
                      name="mobilenumber"
                      value={editableDetails.mobileno || ""}
                      onChange={handleChange}
                    />
                  </Form.Group>
                  
                  <div className="action-buttons">
                    <Button variant="success" onClick={handleSave}>
                      Save
                    </Button>
                    <Button variant="secondary" onClick={toggleEdit}>
                      Cancel
                    </Button>
                  </div>
                </div>
              ) : (
                <div className="about-details">
                   
                  <p>
                    <strong>ID:</strong> {userData.id || "N/A"}
                  </p>
                  <p>
                    <strong>Prefix:</strong> {userData.prefix || "N/A"}
                  </p>
                  <p>
                    <strong>Address:</strong> {userData.doorno || "N/A"}
                  </p>
                  <p>
                    <strong>City:</strong> {userData.city || "N/A"}
                  </p>
                  <p>
                    <strong>Pincode:</strong> {userData.pincode || "N/A"}
                  </p>
                  <p>
                    <strong>Mobile:</strong> {userData.mobileno || "N/A"}
                  </p>
                  <p>
                    <strong>Email:</strong> {userData.email || "N/A"}
                  </p>
                  <Button variant="primary" className="edit-btn" onClick={toggleEdit}>
                    Edit
                  </Button>
                </div>
              )}
               
            </div>
          </div>
        )}

        {/* Tasks Tab */}
        {activeTab === "tasks" && (
          <div className="tasks-tab" style={{ padding: "10px" }}>
            <div className="stats-box">
              <h3>Counts: {isLoading ? "Loading..." : taskCount || "No entries today..."}</h3>
            </div>
            <div className="progress-section">
            <ProgressBar
              now={(Math.min(taskCount, 1000) / 1000) * 100}
              label={`${Math.round((Math.min(taskCount, 1000) / 1000) * 100)}%`}
            />


            </div>
            {error && <p className="error-message">{error}</p>}
          </div>
        )}

        {/* Subscription Tab */}
        {activeTab === "sub" && (
          <div className="sub-tab">
            {/* Weekly Plan */}
            <div className="starter-plan-card">
              <div className="plan-header">
                <h5>1 Week Trial Pack</h5>
                <p className="plan-price">â‚¹20</p>
              </div>
              <div className="plan-body">
                <ul className="plan-features">
                  <li>Duration: 7 Days</li>
                  <li>Bluk Message for 7 days</li>
                  <li>Free Support</li>
                </ul>
                <Button variant="success">Buy Now</Button>
              </div>
            </div>
            <div className="monthly-plan-card">
              <div className="plan-header">
                <h5>1 month Pack</h5>
                <p className="plan-price">â‚¹200</p>
              </div>
              <div className="plan-body">
                <ul className="plan-features">
                  <li>Referral Bonus: â‚¹50</li>
                  <li>Free Support</li>
                  <li>Sign-up bonus: â‚¹20</li>
                </ul>
                <Button variant="success">Buy Now</Button>
              </div>
            </div>
            <div className="yearly-plan-card">
              <div className="plan-header">
                <h5>1 year Pack</h5>
                <p className="plan-price">â‚¹1000</p>
              </div>
              <div className="plan-body">
                <ul className="plan-features">
                  <li>Unlimited messages</li>
                  <li>24*7 Support</li>
                  <li>Sign-up bonus: â‚¹20</li>
                </ul>
                <Button variant="success">Buy Now</Button>
              </div>
            </div>
          </div>
        )}

        {/* Membership Card Tab */}
        {activeTab === "membership" && (
          <>
            <div className="memb-card-download" style={{ textAlign: "right", marginBottom: "10px" }}>
               
            </div>
            <div className="membership-card-container">
              <div className="membership-card">
                
                <div className="card-front">
                  <div className="logo-container">
                    <img src={userImage} className="membership-logo" alt="Logo" />
                  </div>

                  <div className="head">
                    <h4>Signpost Celfon.in Technology</h4>
                  </div>

                  <div className="sub-head">
                    <h4>Member Card</h4>
                  </div>

                  <div className="profile-card">
                    <img src={UserLogo} alt="Profile" />
                  </div>

                  <div className="card-content">
                    <p className="membership-name">
                      Name: {userData.businessname || "N/A"}
                    </p>
                    <p className="membership-id">User ID: {userData.id || "N/A"}</p>
                    <p className="expiry-date">Membership Expires: 31/Dec/2025</p>
                    <p className="expiry-date">Membership Number: 5897486230 012</p>
                  </div>

                  <div className="memb-footer">
                    <p className="footer-text">This card is valid for 5 years from the date of issue. | 46, Sidco Industtrial Estate, Coimbtore - 641021</p>
                  </div>
                </div>

                <div className="card-back">
                  <h4>Membership Benefits</h4>
                  <ul>
                    <li>âœ” Access to exclusive content</li>
                    <li>âœ” Priority customer support</li>
                    <li>âœ” Discounts on services and products</li>
                    <li>âœ” Invitations to special events</li>
                  </ul>
                  <p className="visit-text">Visit our Store to collect books and make sure to visit our E-Books.</p>
                  <p className="visit-text">This Card belogns to the company If you find this anywhrere please bring to signpost celfon technology.</p>
                </div>
              </div>
            </div>
          </>
        )}
      </div>
       {/* Referral Modal */}
      <Modal show={showModal} onHide={() => setShowModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>My Referrals</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <p>Total Referrals: {referralCount}</p>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowModal(false)}>
            Close
          </Button>
        </Modal.Footer>
      </Modal>
    </div>
  );
};

export default UserProfile;




.user-profile {
  font-family: Arial, sans-serif;
  border-radius: 8px;
  position: relative;
  height: auto;
  background-color: #f9f9f9;
  width: 100%;
}

.tabs-wrapper{
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

 
.social-icons {
  display: flex;
  gap: 8px;
  margin-right: 12px;
}

.social-icons i {
  font-size: 18px;
  color: #007bff;
  cursor: pointer;
}

.social-icons i:hover {
  color: #0056b3;
}



.profile-picture {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100px;
  height: 100px;
  background-color: #e0e0e0;
  border-radius: 50%;
}

.profile-circle {
  position: relative;
  width: 100%;
  height: 100%;
  position: relative;
  top: 0vh;
  left: -0vh;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
}

.profile-info {
  flex-grow: 1;
  margin-left: 20px;
}

.profile-info h3 {
  margin: 0;
}

.profile-info p {
  margin: 5px 0;
}

.profile-actions button {
  margin: 15px 5px 0 0; ;
  font-size: 16px; /* Default size */
  padding: 10px 20px; /* Default padding */
}

@media screen and (max-width: 768px) {
  .profile-actions button {
     padding: 5px 5px;
     font-size: 12px;

  }
}

.profile-tabs {
  display: flex;
  justify-content: space-around;
  margin-bottom: 20px;
   
}

.profile-tabs button {
  padding: 10px 15px;
  background-color: #fff;
  border: 1px solid #ccc;
  border-radius: 4px;
  cursor: pointer;
}

.profile-tabs button:hover {
  background-color: #f0f0f0;
}

.profile-details {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.profile-details textarea {
  width: 100%;
  height: 100px;
}

.edit-btn {
  margin-left: 20px;
  padding: 10px 20px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.edit-btn:hover {
  background-color: #0056b3;
}


.profile-tabs {
  margin: 20px 0;
  justify-content: start;
  display: flex;
  gap: 10px;
}

.profile-tabs .nav-link {
  padding: 10px 20px;
  font-size: 14px;
  border: 1px solid #ccc;
  border-radius: 4px;
  color: #333;
}

.profile-tabs .nav-link.active {
  background-color: #007bff;
  color: white;
}

.about-edit-form{
  width: 20px;
}
 
.about-edit-form, .about-details {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.about-details .edit-btn {
  width: 200px;
  margin: 0 auto;
   
}



.about-details p{
  background-color: #f2f3f3;
  margin: 10px;
  padding: 5px 5px;
  border-radius: 5px;
  

}

.about-container h4 {
  text-align: center;
  margin-bottom: 20px;
}

.about-container p {
  font-size: 1rem;
  margin: 0;
}

.action-buttons {
  display: flex;
  justify-content: center;
}

.about-container button {
  width: 48%;
}

.error {
  color: red;
  font-size: 0.9rem;
  text-align: center;
  margin-top: 10px;
}

@media (max-width: 768px) {
  .about-container {
    padding: 15px;
  }

  .about-container p {
    font-size: 0.9rem;
  }

  .about-container button {
    width: 100%;
    margin-bottom: 10px;
  }

  .action-buttons {
    flex-direction: column;
  }
}







.sub-tab{
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;

  @media screen and (max-width: 768px) {
    flex-direction: column;
    
  }
}



.starter-plan-card {
   
  width: 100%;
  max-width: 400px;
  margin: 20px auto;
  border: 1px solid #ddd;
  border-radius: 10px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

.plan-header {
  background-color: #ffcdd2;
  color: #b71c1c;
  text-align: center;
  padding: 20px;
}

.plan-header:nth-child(1) {
  background-color: #ffe082; /* Yellow for Monthly */
  color: #f57f17;
}

.plan-header:nth-child(2) {
  background-color: #c8e6c9; /* Green for Yearly */
  color: #2e7d32;
}

.plan-header h5 {
  font-size: 1.5rem;
  margin: 0;
}

.plan-price {
  font-size: 1.2rem;
  margin-top: 10px;
}

.plan-body {
  padding: 20px;
  text-align: center;
}

.plan-features {
  list-style: none;
  padding: 0;
  margin: 0 0 20px;
}

.plan-features li {
  font-size: 1rem;
  margin-bottom: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.plan-features i {
  margin-right: 10px;
}

.fa-check-circle {
  color: #28a745; /* Green checkmark */
}

.fa-times-circle {
  color: #dc3545; /* Red cross */
}

.subscribe-btn {
  background-color: #007bff;
  color: #fff;
  border: none;
  padding: 10px 20px;
  font-size: 1rem;
  border-radius: 5px;
  cursor: pointer;
}

.subscribe-btn:hover {
  background-color: #0056b3;
}


 
.profile-header {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  padding: 10px 50px;
}

 
 

.profile-img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 50%;
}

.overlay-icon {
  /* overflow: visible; */
  position: absolute;
  bottom: 5px;
  right: 5px;
  background-color: rgba(0, 0, 0, 0.6);
  color: white;
  font-size: 18px;
  padding: 6px;
  border-radius: 50%;
  transition: background-color 0.3s ease;
   
}

.profile-circle:hover .overlay-icon {
  background-color: rgba(0, 0, 0, 0.8);
  overflow: visible;
}


/* Profile Info */
.profile-info {
  /* flex: 1 1 300px; */
  margin-left: 20px;
}

.profile-info h3 {
  margin: 0;
  font-size: 18px;
  font-weight: 600;
}

.profile-info p {
  margin: 5px 0;
  font-size: 15px;
  font-weight: 600;
}

/* Tabs */
.profile-tabs {
  display: flex;
  flex-wrap: wrap;
  justify-content: start;
  gap: 10px;
  margin: 20px 0;
}

.profile-tabs .nav-link {
  padding: 10px 15px;
  font-size: 14px;
  /* border: 1px solid #ccc; */
  /* border-radius: 4px; */
  /* color: #333; */
  text-align: center;
}

.profile-tabs .nav-link.active {
  background-color: #007bff;
  color: white;
}

/* About Tab */
.about-container {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  padding: 15px;
}

.about-container p {
  font-size: 0.9rem;
  margin: 0;
}

.about-container button {
  width: 100%;
}

.about-edit-form,
.about-details {
  flex: 1 1 100%;
}

.action-buttons {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
}

.action-buttons button {
  width: 48%;
}

/* Tasks Tab */
.tasks-tab .stats-box {
  text-align: center;
  margin-bottom: 15px;
}

.tasks-tab .progress-section {
  padding: 10px;
}















/* Subscription Plans */
.sub-tab {
  text-align: center; /* Center-align child elements */
  padding: 20px;
  box-sizing: border-box;
}

.starter-plan-card,
.monthly-plan-card,
.yearly-plan-card {
  display: inline-block; /* Allow cards to sit next to each other */
  vertical-align: top; /* Align cards properly */
  width: calc(33.333% - 20px); /* Default: 3 cards per row */
  max-width: 400px;
  margin: 10px;
  border: 1px solid #ddd;
  border-radius: 10px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  overflow: hidden;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  background: #fff;
}

.starter-plan-card:hover,
.monthly-plan-card:hover,
.yearly-plan-card:hover {
  /* transform: translateY(-5px); */
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
}

.plan-header {
  text-align: center;
  padding: 20px;
  font-weight: bold;
  color: #b71c1c;
}

.starter-plan-card .plan-header {
  background-color: #ffcdd2;
}

.monthly-plan-card .plan-header {
  background-color: #ffffcd;
}

.yearly-plan-card .plan-header {
  background-color: #d8ffcd;
}

.plan-body {
  padding: 20px;
  text-align: center;
}

.plan-features {
  list-style: none;
  padding: 0;
  margin: 0;
}

.plan-features li {
  font-size: 0.9rem;
  margin: 8px 0;
}

.subscribe-btn {
  width: 100%;
  margin-top: 20px;
}

/* Responsive Adjustments */
@media (max-width: 1024px) {
  .starter-plan-card,
  .monthly-plan-card,
  .yearly-plan-card {
    width: calc(50% - 20px); /* Two cards per row on tablets */
  }
}

@media (max-width: 768px) {
  .starter-plan-card,
  .monthly-plan-card,
  .yearly-plan-card {
    width: calc(100% - 40px); /* Full-width cards on small screens */
    margin: 20px auto; /* Center the cards */
  }
}

/* Adjustments for very small screens */
@media (max-width: 480px) {
  .plan-header {
    font-size: 1.1rem; /* Slightly smaller text for headers */
    padding: 15px;
  }

  .plan-body {
    padding: 15px;
  }

  .plan-features li {
    font-size: 0.8rem; /* Reduce text size for smaller screens */
  }

  .subscribe-btn {
    font-size: 0.9rem; /* Adjust button size */
  }
}



















.membership-card {
  height: 50vh;
  padding: 20px;
  border: 1px solid #e0e0e0;
  border-radius: 12px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  max-width: 800px;
  margin: 20px auto;
  font-family: Arial, sans-serif;
  background: linear-gradient(135deg, #dfe9f3, #ffffff), url('../assets/images/memb-line-background.jpg') no-repeat center center;
  background-size: cover;
  background-blend-mode: hard-light;
  position: relative;
  transform-style: preserve-3d;
  transition: transform 0.6s ease-in-out;
}

.membership-card:hover {
  transform: rotateY(180deg);
}

.card-front .head{
  padding: 10px;
  border-radius: 12px 12px 0 0;
  position: relative;
  top: -13vh;

  @media screen and (max-width: 768px) {
    top: -10vh;
    position: relative;
    left: 5vh;
     
  }
}

.card-front .head h4{
  text-align: center;
  font-weight: bold;

  @media screen and (max-width: 768px) {
    font-size: 17px;
     
  }
}

.card-front .sub-head{
  padding: 10px;
  border-radius: 12px 12px 0 0;
  position: relative;
  top: -13vh;


  @media screen and (max-width: 768px) {
    top: -13vh;
    position: relative;
    left: 5vh;
     
  }

}

.card-front .sub-head h4{
  text-align: center;
  

  @media screen and (max-width: 768px) {
    font-size: 17px;
     
  }
}




.card-front .profile-card{
   
  padding: 10px;
  position: relative;
  top: -18vh;
  margin: 20px auto;
  width: 100%;

  @media screen and (max-width: 768px) {
    top: -12vh;
    position: relative;
    /* max-width: 70vh; */
     
  }

}


.card-front .card-content{
  padding: 10px;
  border-radius: 12px 12px 0 0;
  position: relative;
  top: -41vh;
  left: 26vh;
  max-width: 49vh;
  font-weight: 600;
  line-height: 5vh;

  @media screen and (max-width: 768px) {
    top: -32vh;
    position: relative;
    left: 16vh;
    height: 9vh;
    line-height: 5vh;
    flex-wrap: wrap;
    max-width: 60%;
     
  }

}


.card-front,
.card-back {
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: hidden;
  border-radius: 12px;
  padding: 20px;
}

.card-front {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}


.card-front .memb-footer{
  background-color: #0056b3;
  color: #ffffff;
  padding: 10px;
  border-radius: 12px 12px 12px 12px;
  position: relative;
  top: -39vh;
  height: 41px;
  width: 105%;
  left: -40px;
  text-align: center;

  @media screen and (max-width: 768px) {
    top: -4vh;
    width: 112%;
    position: relative;
    left: -5.6vh;
    height: 9vh;
     
  }

}




.card-back {
  background-color: #1d1d1d;
  color: #ffffff;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  transform: rotateY(180deg);
  text-align: center;
  padding: 20px;
}

.card-back h4 {
  font-size: 1.5rem;
  margin-bottom: 20px;
  color: #ffd700;
}

.card-back ul {
  list-style: none;
  padding: 0;
  font-size: 1rem;
  color: #ffffff;
}

.card-back ul li {
  margin: 10px 0;
  font-size: 1rem;
}

.card-back .visit-text {
  margin-top: 20px;
  font-size: 0.9rem;
  color: #ccc;
  font-style: italic;
}

.logo-container img {
  max-width: 80px;
  height: auto;
  border-radius: 50%;
  border: 2px solid #ffffff;

  @media screen and (max-width: 768px) {
    max-width: 70px;
    height: auto;
    border-radius: 50%;
    border: 2px solid #ffffff;
     
  }

}

.profile-card img {
  width: 15%;
 
  border-radius: 10px;
}

.head h4,
.sub-head h4 {
  text-align: center;
  color: #6a1b9a;
}

.card-content {
  font-size: 1rem;
  color: #333;
}

.membership-card-container {
  perspective: 1000px;
}

/* Responsive Styles */
@media (max-width: 768px) {
  .membership-card {
    height: 60vh;
    width: 90%;
  }

  .card-back ul li {
    font-size: 0.9rem;
  }

  .card-back h4 {
    font-size: 1.2rem;
  }
}

@media (max-width: 480px) {
  .membership-card {
    padding: 10px;
    height: 70vh;
  }

  .card-back ul li {
    font-size: 0.8rem;
  }

  .card-back h4 {
    font-size: 1rem;
  }

  .card-back .visit-text {
    font-size: 0.8rem;
  }
}




.modal-content {
  background: white;
  padding: 20px;
  border-radius: 10px;
  width: 80%;
  max-width: 900px;
  text-align: center;
  overflow: auto;
  position: relative;
  left: 30px;
}
































import React, { useState, useEffect } from "react";
import axios from "axios";
import { useAuth } from "./Auth"; // Assuming this is your auth context
import moment from "moment"; // Import moment.js
import "../Css/UserProfile.css";
import { Modal, Button, Form } from "react-bootstrap";
import bookLogo from "../assets/images/book_logo.png";

const UserProfile = () => {
  const [activeTab, setActiveTab] = useState("general");
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const { userData, setUserData } = useAuth(); // Fetch userData from Auth context
  const [teamData, setTeamData] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [referralCount, setReferralCount] = useState(0);
  const [taskCount, setTaskCount] = useState(""); // Task count
  const [isEditing, setIsEditing] = useState(false);
  const [editableDetails, setEditableDetails] = useState(userData || {});
  const [error, setError] = useState("");
  const [showModal, setShowModal] = useState(false);
  const [message, setMessage] = useState("");
  const toggleModal = () => setShowModal(!showModal);
  const [selectedPrice, setSelectedPrice] = useState(null);

  // Subscription state
  const [isSubscribed, setIsSubscribed] = useState(false);
  const [expiryDate, setExpiryDate] = useState(null);

  useEffect(() => {
    if (userData.subscription_date) {
      const subscriptionDate = moment(userData.subscription_date, "DD/MM/YYYY h:mm A");
      const today = moment();
      const durationInDays =
        userData.subscription_plan === "1 Week" ? 7 :
        userData.subscription_plan === "1 Month" ? 30 :
        userData.subscription_plan === "1 Year" ? 365 : 0;

      const calculatedExpiryDate = subscriptionDate.clone().add(durationInDays, "days");

      if (today.isBefore(calculatedExpiryDate)) {
        setIsSubscribed(true);
        setExpiryDate(calculatedExpiryDate.format("DD/MM/YYYY h:mm A"));
      }
    }
  }, [userData]);

  return (
    <div className="sub-container">
      {activeTab === "sub" && (
        <div className="sub-container">
          {isSubscribed ? (
            // Show Subscription Active Card
            <div className="subscribed-card">
              <h3>You're Subscribed!</h3>
              <p className="plan-name">{userData.subscription_plan} Plan</p>
              <p className="plan-price">â‚¹{userData.subscription_amount} / {userData.subscription_plan}</p>
              <p>Subscription valid until: {expiryDate}</p>
              <Button variant="danger" onClick={() => alert("Cancel Subscription Coming Soon!")}>
                Cancel Subscription
              </Button>
            </div>
          ) : (
            // Show Subscription Plans
            <div className="tab-content-3">
              <div className="sub-tab">
                {/* Weekly Plan */}
                <div className="starter-plan-card">
                  <div className="plan-header">
                    <h5>1 Week Trial Pack</h5>
                    <p className="plan-price">â‚¹20</p>
                  </div>
                  <div className="plan-body">
                    <ul className="plan-features">
                      <li>Duration: 7 Days</li>
                      <li>Bulk Messages for 7 days</li>
                      <li>Free Support</li>
                    </ul>
                    <Button variant="success" onClick={() => setSelectedPrice(20)}>
                      Buy Now
                    </Button>
                  </div>
                </div>

                {/* Monthly Plan */}
                <div className="monthly-plan-card">
                  <div className="plan-header">
                    <h5>1 Month Pack</h5>
                    <p className="plan-price">â‚¹200</p>
                  </div>
                  <div className="plan-body">
                    <ul className="plan-features">
                      <li>Referral Bonus: â‚¹50</li>
                      <li>Free Support</li>
                      <li>Sign-up Bonus: â‚¹20</li>
                    </ul>
                    <Button variant="success" onClick={() => setSelectedPrice(200)}>
                      Buy Now
                    </Button>
                  </div>
                </div>

                {/* Yearly Plan */}
                <div className="yearly-plan-card">
                  <div className="plan-header">
                    <h5>1 Year Pack</h5>
                    <p className="plan-price">â‚¹1000</p>
                  </div>
                  <div className="plan-body">
                    <ul className="plan-features">
                      <li>Unlimited messages</li>
                      <li>24/7 Support</li>
                      <li>Sign-up Bonus: â‚¹20</li>
                    </ul>
                    <Button variant="success" onClick={() => setSelectedPrice(1000)}>
                      Buy Now
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default UserProfile;


















// import React, { useState } from "react";

// const ContactForm = () => {
//   const [formData, setFormData] = useState({
//     name: "",
//     email: "",
//     subject: "",
//     message: "",
//   });

//   const [status, setStatus] = useState("");

//   const handleChange = (e) => {
//     setFormData({ ...formData, [e.target.name]: e.target.value });
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();
  
//     try {
//       const response = await fetch("https://signpostphonebook.in/contact_email_messages.php", {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//         },
//         body: JSON.stringify(formData),
//       });
  
//       const result = await response.text();
//       console.log(result);
  
//       if (result === "success") {
//         setStatus("Message sent successfully!");
//         setFormData({ name: "", email: "", subject: "", message: "" });
//       } else {
//         setStatus("Failed to send message. Try again.");
//       }
//     } catch (error) {
//       console.error("Error sending email:", error);
//     }
//   };
  

//   return (
//     <div>
//       <h2>Contact Us</h2>
//       {status && <p>{status}</p>}
//       <form onSubmit={handleSubmit}>
//         <input type="text" name="name" placeholder="Your Name" value={formData.name} onChange={handleChange} required />
//         <input type="email" name="email" placeholder="Your Email" value={formData.email} onChange={handleChange} required />
//         <input type="text" name="subject" placeholder="Subject" value={formData.subject} onChange={handleChange} required />
//         <textarea name="message" placeholder="Your Message" value={formData.message} onChange={handleChange} required />
//         <button type="submit">Send Message</button>
//       </form>
//     </div>
//   );
// };

// export default ContactForm;





































































import React, { useState } from "react";
import { Container, Row, Col, Form, Button, Modal } from "react-bootstrap";
import emailjs from "emailjs-com";
import "bootstrap/dist/css/bootstrap.min.css";
import "../Css/Contactus.css";

const ContactCard = () => {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    subject: "",
    message: "",
  });

  const [showModal, setShowModal] = useState(false);
  const [errors, setErrors] = useState({});
  const [touched, setTouched] = useState({});

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
    setErrors({ ...errors, [e.target.name]: "" });
  };

  const handleBlur = (e) => {
    setTouched({ ...touched, [e.target.name]: true });
    validateForm();
  };

  const validateForm = () => {
    let newErrors = {};
    if (!formData.name.trim()) newErrors.name = "Full Name is required";
    if (!formData.email.trim()) newErrors.email = "Email is required";
    else if (!/\S+@\S+\.\S+/.test(formData.email)) newErrors.email = "Invalid email format";
    if (!formData.subject.trim()) newErrors.subject = "Subject is required";
    if (!formData.message.trim()) newErrors.message = "Message is required";
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    emailjs
      .send(
        "YOUR_SERVICE_ID",
        "YOUR_TEMPLATE_ID",
        formData,
        "YOUR_PUBLIC_KEY"
      )
      .then(
        (response) => {
          console.log("Email Sent!", response.status, response.text);
          setShowModal(true);
          setFormData({ name: "", email: "", subject: "", message: "" });
          setTouched({});
        },
        (error) => {
          console.log("Failed to send email:", error);
        }
      );
  };

  return (
    <section className="ftco-section">
      <Container className="fullcontent">
        <Row className="justify-content-center">
          <Col md={6} className="text-center mb-5 contact-name">
            <h2 className="heading-section">Contact Us</h2>
          </Col>
        </Row>
        <Row className="justify-content-center">
          <Col md={12}>
            <div className="wrapper">
              <Row className="no-gutters">
                <Col lg={8} md={7} className="order-md-last d-flex align-items-stretch">
                  <div className="contact-wrap w-100 p-md-5 p-4">
                    <h3 className="mb-4">Get in touch</h3>
                    <Form id="contactForm" name="contactForm" className="contactForm" onSubmit={handleSubmit}>
                      <Row>
                        <Col md={6}>
                          <Form.Group className="naame mb-3">
                            <Form.Label>Full Name</Form.Label>
                            <Form.Control 
                              type="text" 
                              name="name" 
                              value={formData.name}
                              onChange={handleChange} 
                              onBlur={handleBlur}
                              placeholder="Name" 
                              isInvalid={touched.name && !!errors.name}
                            />
                            <Form.Control.Feedback type="invalid">{errors.name}</Form.Control.Feedback>
                          </Form.Group>
                        </Col>
                        <Col md={6}>
                          <Form.Group className="emaail mb-3">
                            <Form.Label>Email Address</Form.Label>
                            <Form.Control 
                              type="email" 
                              name="email" 
                              value={formData.email}
                              onChange={handleChange} 
                              onBlur={handleBlur}
                              placeholder="Email" 
                              isInvalid={touched.email && !!errors.email}
                            />
                            <Form.Control.Feedback type="invalid">{errors.email}</Form.Control.Feedback>
                          </Form.Group>
                        </Col>
                        <Col md={12}>
                          <Form.Group className="mb-3">
                            <Form.Label>Subject</Form.Label>
                            <Form.Control 
                              type="text" 
                              name="subject" 
                              value={formData.subject}
                              onChange={handleChange} 
                              onBlur={handleBlur}
                              placeholder="Subject" 
                              isInvalid={touched.subject && !!errors.subject}
                            />
                            <Form.Control.Feedback type="invalid">{errors.subject}</Form.Control.Feedback>
                          </Form.Group>
                        </Col>
                        <Col md={12}>
                          <Form.Group className="mb-3">
                            <Form.Label>Message</Form.Label>
                            <Form.Control 
                              as="textarea" 
                              name="message" 
                              rows={4} 
                              value={formData.message}
                              onChange={handleChange} 
                              onBlur={handleBlur}
                              placeholder="Message" 
                              isInvalid={touched.message && !!errors.message}
                            />
                            <Form.Control.Feedback type="invalid">{errors.message}</Form.Control.Feedback>
                          </Form.Group>

                          <Form.Group className="submiting mb-3">
                          <Button type="submit" className="btn btn-primary">Send Message</Button>
                          <div className="submitting"></div>
                        </Form.Group>
                        </Col>
                      </Row>
                    </Form>
                  </div>
                </Col>
                <Col lg={4} md={5} className="d-flex align-items-stretch">
                <div className="info-wrap bg-primary w-100 p-md-5 p-4">
                  <h3>Let's get in touch</h3>
                  <p className="mb-4">We're open for any suggestion or just to have a chat</p>
                  <div className="dbox w-100 d-flex align-items-start">
                    <div className="icon d-flex align-items-center justify-content-center">
                      <i className="fas fa-map-marker-alt"></i> {/* Address Icon */}
                    </div>
                    <div className="text pl-3">
                      <p><span>Address:</span> Signpost Celfone.In Technology <br /> 46, SIDCO Industrail Estate, Coimbatore - 641 021 </p>
                    </div>
                  </div>
                  <div className="dbox w-100 d-flex align-items-center">
                    <div className="icon d-flex align-items-center justify-content-center">
                      <i className="fas fa-phone-alt"></i> {/* Phone Icon */}
                    </div>
                    <div className="text pl-3">
                      <p><span>Phone : 9786889092</span> <a href="tel://9786889092"></a> | <span> 9843657564 </span> <a href="tel://9843657564"></a> </p>
                    </div>
                  </div>
                  <div className="dbox w-100 d-flex align-items-center">
                    <div className="icon d-flex align-items-center justify-content-center">
                      <i className="fas fa-envelope"></i> {/* Email Icon */}
                    </div>
                    <div className="text pl-3">
                      <p><span>Email:</span>  <a href="mailto:signpostcelfon.intech@gmail.com">signpostcelfon.intech@gmail.com</a></p>
                    </div>
                  </div>
                  <div className="dbox w-100 d-flex align-items-center">
                    <div className="icon d-flex align-items-center justify-content-center">
                      <i className="fas fa-globe"></i> {/* Website Icon */}
                    </div>
                    <div className="text pl-3">
                      <p><span>Website</span> <a href="#">signpostphonebook.in</a></p>
                    </div>
                  </div>
                </div>
              </Col>
              </Row>
            </div>
          </Col>
        </Row>
      </Container>
    </section>
  );
};

export default ContactCard;















































































































// import React, { useState, useEffect } from "react";
// import axios from "axios";
// import "../Css/NearbyPromotion.css";
// import { FaPencilAlt } from "react-icons/fa";

// const Nearbypromotion = () => {
//   const [pincodeInput, setPincodeInput] = useState("");
//   const [selectAll, setSelectAll] = useState(false);
//   const [clrBtn, setClrBtn] = useState(false);
//   const [datas, setData] = useState([]);
//   const [showresults, setShowresults] = useState(false);
//   const [selectedBusinesses, setSelectedBusinesses] = useState([]);
//   const [selectedPrefix, setSelectedPrefix] = useState(null);
//   const maxLength = 290;
//   const [customMessage, setCustomMessage] = useState(
//     "I Saw Your Listing in SIGNPOST PHONE BOOK. I am Interested in your Products. Please Send Details/Call Me. (Sent Thro Signpost PHONE BOOK)"
//   );
//   const [prefix, setPrefix] = useState("");
//   const [loading, setLoading] = useState(false);

//   const handleSelectAllChange = () => {
//     if (selectAll) {
//       setSelectedBusinesses([]);
//     } else {
//       setSelectedBusinesses(datas);
//     }
//     setSelectAll(!selectAll);
//   };

//   const fetchData = async () => {
//     try {
//       const response = await fetch(
//         "https://signpostphonebook.in/client_fetch.php"
//       );
//       if (!response.ok)
//         throw new Error(`HTTP Error! Status: ${response.status}`);
//       const jsonResponse = await response.json();
//       if (Array.isArray(jsonResponse)) {
//         setData(jsonResponse.sort((a, b) => b.id - a.id));
//       } else {
//         alert("Unexpected response from server.");
//       }
//     } catch (error) {
//       alert("Failed to load data: " + error.message);
//     }
//   };

//   useEffect(() => {
//     fetchData();
//   }, []);

//   const fetchBusinesses = () => {
//     if (!pincodeInput || !prefix) {
//       alert("Please enter a valid pincode and select a prefix.");
//       return;
//     }

//     setLoading(true);
//     axios
//       .get(
//         `https://signpostphonebook.in/testprefix.php?pincode=${pincodeInput}&prefix=${prefix}`
//       )
//       .then((response) => {
//         setData(response.data);
//         setClrBtn(true);
//         setShowresults(true);
//       })
//       .catch((error) => console.error("Error fetching businesses:", error))
//       .finally(() => setLoading(false));
//   };

//   const handleCheckboxChange = (client) => {
//     setSelectedBusinesses((prev) =>
//       prev.includes(client)
//         ? prev.filter((item) => item !== client)
//         : [...prev, client]
//     );
//   };

//   const clearItems = () => {
//     setPincodeInput("");
//     setPrefix("");
//     setSelectedPrefix(null);
//     fetchData();
//     setSelectAll(false);
//     setSelectedBusinesses([]);
//     setClrBtn(!clrBtn);
//     setShowresults(false);
//   };
//   const sendBatchSMS = () => {
//     if (selectedBusinesses.length === 0) {
//       window.alert("No clients selected!");
//       return;
//     }

//     const mobileNumbers = selectedBusinesses.map((client) => client.mobileno);
//     try {
//       const recipients = mobileNumbers.join(",");
//       const smsUri = `sms:${recipients}?body=${encodeURIComponent(
//         customMessage
//       )}`;
//       window.location.href = smsUri;
//       handleSelectAllChange();
//     } catch (error) {
//       console.error("Error opening SMS application:", error.message);
//       window.alert(
//         "An error occurred while opening the SMS application. Please try again."
//       );
//     }
//   };

//   return (
//     <div className="container">
//       <div className="input-section">
//         <div>
//           <p>
//             <span className="headingNearby">
//               <strong>NEARBY PROMOTION</strong>
//             </span>{" "}
//             <br />
//             {`Send Text messages to Mobile Users in desired Pincode Area`}{" "}
//             <br />
//             {`1) First edit / create message to be sent. Minimum 1 Count (145 characters), Maximum 2 counts (290 characters)`}
//             <br />
//             {`2) Select type of Recipient  (Males / Females / Business Firms)`}
//             <br />
//             {`3) Type Pincode Number of Targetted area for Promotion`}
//             <br />
//             {`4) For error free delivery of messages,  send in batches of 10 nos. each time`}
//           </p>
//           <label htmlFor="">
//             <strong>
//               Edit / Create Message :{" "}
//               <span>
//                 <FaPencilAlt
//                   style={{
//                     marginLeft: "10px",
//                     cursor: "pointer",
//                     color: "#000000",
//                   }}
//                 />
//               </span>{" "}
//             </strong>
//           </label>
//           <div
//             className="message-box-container"
//             style={{ position: "relative", width: "100%" }}
//           >
//             <textarea
//               className="message-box"
//               value={customMessage}
//               onChange={(e) => setCustomMessage(e.target.value)}
//               rows={4}
//               placeholder="Type your message here..."
//               style={{
//                 width: "100%",
//                 padding: "10px",
//                 boxSizing: "border-box",
//               }}
//             ></textarea>
//             <div
//               className="char-counter"
//               style={{
//                 position: "absolute",
//                 top: "2px",
//                 right: "10px",
//                 fontSize: "14px",
//                 color: customMessage.length === maxLength ? "red" : "black",
//               }}
//             >
//               {maxLength - customMessage.length} / {maxLength}
//             </div>
//           </div>
//           <label>
//             <strong>Select Recipients Type :</strong>{" "}
//           </label>
//           <div className="prefix-container">
//             <div className="radio-group" aria-required>
//               <label htmlFor="Mr">
//                 <input
//                   type="radio"
//                   value="Mr."
//                   checked={prefix === "Mr."}
//                   onChange={(e) => setPrefix(e.target.value)}
//                 />
//                 &nbsp;Males
//               </label>
//             </div>
//             <div className="radio-group">
//               <label htmlFor="Mr">
//                 <input
//                   type="radio"
//                   value="Ms."
//                   checked={prefix === "Ms."}
//                   onChange={(e) => setPrefix(e.target.value)}
//                 />
//                 &nbsp;Females
//               </label>
//             </div>
//             <div className="radio-group">
//               <label htmlFor="Mr">
//                 <input
//                   type="radio"
//                   value="M/s."
//                   checked={prefix === "M/s."}
//                   onChange={(e) => setPrefix(e.target.value)}
//                 />
//                 &nbsp;Business Firms
//               </label>
//             </div>
//           </div>
//         </div>
//         <div>
//           <label htmlFor="">
//             <strong>Type Pincode of Recipients</strong>{" "}
//           </label>
//         </div>
//         <div className="search_Container">
//           <div className="input-wrapper">
//             <input
//               type="number"
//               placeholder="Enter Pincode"
//               maxLength={6}
//               value={pincodeInput}
//               onChange={(e) => setPincodeInput(e.target.value)}
//             />
//           </div>
//           {clrBtn ? (
//             <button
//               className="btn btn-primary search_Button"
//               onClick={clearItems}
//             >
//               Clear
//             </button>
//           ) : (
//             <button
//               className="btn btn-primary search_Button"
//               onClick={fetchBusinesses}
//             >
//               Search
//             </button>
//           )}
//         </div>
//         {showresults && (
//           <div className="data_Controls">
//             <div>
//               <p>
//                 <strong>Results Displayed :</strong> {datas.length},
//               </p>
//             </div>
//             <div>
//               <p>
//                 <strong>Selected:</strong> {selectedBusinesses.length}
//               </p>
//             </div>
//           </div>
//         )}
//       </div>
//       {loading ? (
//         <p>Loading...</p>
//       ) : (
//         <div>
//           <div className="result-header">
//             <label htmlFor="">
//               <strong>Select Recipients :</strong>
//             </label>
//             <br />
//             <div className="selectAllSection">
//               <div>
//                 <label>
//                   <strong>Select All</strong>{" "}
//                 </label>
//               </div>
//               <div>
//                 <input
//                   type="checkbox"
//                   onChange={handleSelectAllChange}
//                   checked={selectAll}
//                 />
//               </div>
//             </div>

//             <button className="btn btn-primary mb-2" onClick={sendBatchSMS}>
//               Send SMS
//             </button>
//           </div>
//           {showresults ? (
//             <div className="scroll-container">
//               {datas.length > 0 ? (
//                 <>
//                   {datas.map((item) => (
//                     <div className="card" key={item.id}>
//                       <div className="card-details">
//                         <p className="heading-text">
//                           <strong>{item.businessname}</strong>
//                         </p>
//                         <p className="card-para">{item.product}</p>
//                       </div>
//                       <div className="checkbox">
//                         <p>{item.mobileno.slice(0, -5)}xxxxx</p>
//                         <input
//                           className="inputCheckbox"
//                           type="checkbox"
//                           checked={selectedBusinesses.includes(item)}
//                           onChange={() => handleCheckboxChange(item)}
//                         />
//                       </div>
//                     </div>
//                   ))}
//                 </>
//               ) : (
//                 <p>Loading...</p>
//               )}
//             </div>
//           ) : (
//             <div className="container defaultContainer mt-2">
//               <p>
//                 <strong>Your Result Will be Shown Here!!..</strong>
//               </p>
//             </div>
//           )}
//           <button className="btn btn-primary mt-2" onClick={sendBatchSMS}>
//             Send SMS
//           </button>
//           <p>
//             <strong>Selected:</strong> {selectedBusinesses.length}
//           </p>
//         </div>
//       )}
//     </div>
//   );
// };

// export default Nearbypromotion;








